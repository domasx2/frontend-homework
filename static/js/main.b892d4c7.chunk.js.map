{"version":3,"sources":["components/Uploader.tsx","hooks/use-promise.ts","hooks/use-parsed-files.ts","components/FileList.tsx","hooks/use-email-sender.ts","components/SendError.tsx","App.tsx","index.tsx"],"names":["Uploader","onUpload","type","placeholder","onChange","e","target","files","Array","from","multiple","accept","initialValue","result","loading","settled","error","usePromise","promise","useState","value","setValue","useEffect","cancelled","current","then","res","catch","parseFile","file","text","content","lines","Set","split","map","x","trim","filter","FileList","key","name","size","EmailSendError","msg","failedEmails","Error","SendError","className","message","email","App","setFiles","console","log","parsedFilesBag","useMemo","Promise","all","useParsedFiles","deps","reqPromise","setReqPromise","send","useCallback","emails","a","fetch","method","headers","body","JSON","stringify","response","get","includes","json","err","status","ok","success","useEmailSender","disabled","onClick","reduce","parsedFile","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b892d4c7.chunk.js","sourcesContent":["import React, { FC, ChangeEventHandler } from 'react'\n\nexport interface UploaderProps {\n  onUpload: (files: File[]) => void\n}\n\nexport const Uploader: FC<UploaderProps> = ({ onUpload }) => {\n\n  const onChange: ChangeEventHandler<HTMLInputElement> = e =>  e.target.files && onUpload(Array.from(e.target.files))\n\n  return (\n    <input type=\"file\" placeholder=\"select text files\" onChange={onChange} multiple accept=\"text/plain\"/>\n  )\n}","import { useEffect, useState } from 'react'\n\nexport interface UsePromiseValue<T, E = unknown> {\n  result: T | null\n  loading: boolean\n  error?: E\n  settled: boolean\n}\n\nconst initialValue: UsePromiseValue<any, any> = {\n  result: null,\n  loading: false,\n  settled: false,\n  error: null\n}\n\nexport function usePromise<T, E = Error>(promise: Promise<T> | null): UsePromiseValue<T, E> {\n  const [value, setValue] = useState<UsePromiseValue<T, E>>(initialValue)\n\n  useEffect(() => {\n    const cancelled = {\n      current: false\n    }\n\n    if (promise) {\n      setValue({ ...initialValue, loading: true })\n      promise\n        .then(res => {\n          if (!cancelled.current) {\n            setValue({ result: res, loading: false, settled: true })\n          }\n        })\n        .catch(e => {\n          if (!cancelled.current) {\n            setValue({ result: null, loading: false, error: e, settled: false })\n          }\n        })\n    } else {\n      setValue(initialValue)\n    }\n\n    return () => {\n      cancelled.current = true\n    }\n  }, [promise])\n\n  return value\n}","import { usePromise, UsePromiseValue } from \"./use-promise\"\nimport { useMemo } from \"react\"\n\nexport interface ParsedFile {\n  file: File,\n  lines: Set<string>\n}\n\nfunction parseFile(file: File): Promise<ParsedFile> {\n  return file.text().then(content => ({\n    file,\n    lines: new Set(content.split(/\\r?\\n/).map(x => x.trim()).filter(x => !!x))\n  }))\n}\n\nexport function useParsedFiles(files: File[] | null): UsePromiseValue<ParsedFile[], Error> {\n  const promise = useMemo(() => files ? Promise.all(files.map(parseFile)) : null, [files])\n  return usePromise(promise)\n}","import React,  { FC } from 'react'\nimport { ParsedFile } from '../hooks/use-parsed-files';\n\nexport interface FileListProps {\n  files: ParsedFile[]\n}\n\nexport const FileList: FC<FileListProps> = ({ files }) => (\n  <ul>\n    {files.map(({ file, lines }) => <li key={file.name}>{file.name} ({lines.size} emails)</li>)}\n  </ul>\n)","import { useCallback, useState, useMemo, useEffect } from \"react\"\nimport { usePromise } from \"./use-promise\"\n\ninterface EmailSendErrorBody {\n  error: string,\n  emails: string[]\n}\ntype SendFn = (emails: Set<string>) => void\n\nexport class EmailSendError extends Error {\n  failedEmails: string[]\n  constructor(msg: string, failedEmails: string[]) {\n    super(msg)\n    this.failedEmails = failedEmails\n  }\n}\n\ninterface RequestState {\n  loading: boolean\n  error?: Error | EmailSendError\n  success: boolean\n}\n\n\ntype UseEmailSenderBag = [SendFn, RequestState]\n\nconst POST_URL = 'https://frontend-homework.togglhire.vercel.app/api/send'\n\nexport function useEmailSender(deps: any[]): UseEmailSenderBag {\n  /*\n  I know it's kinda convoluted, but:\n  we gotta use usePromise to avoid setState error in case component was unmounted before request completes\n  */\n\n  const [reqPromise, setReqPromise] = useState<Promise<{ response: Response, content?: EmailSendErrorBody }> | null>(null)\n\n  useEffect(() => setReqPromise(null), deps)\n\n  const { result, error, loading } = usePromise(reqPromise)\n\n  const send = useCallback(async (emails: Set<string>) => setReqPromise((async () => {\n      const response = await fetch(POST_URL, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({ emails: Array.from(emails) })\n      })\n      return {\n        response,\n        content: response.headers.get('Content-Type')?.includes('application/json') ?  await response.json() : null\n      }\n    })()), [])\n\n  return useMemo(() => {\n\n    const err = (() => {\n      if (error) return error \n      if (result?.content && result.response.status === 500) {\n        return new EmailSendError(result.content.error, result.content.emails)\n      }\n      if (result?.response.ok === false) {\n        return new Error(`Unexpected API response, code ${result?.response.status}`)\n      }\n    })()\n    \n    return [\n      send, \n      {\n        loading,\n        success: !!result?.response.ok,\n        error: err\n      }]\n    }, [send, result, error, loading])\n  }","import React, { FC } from 'react'\nimport { EmailSendError } from '../hooks/use-email-sender'\n\ninterface SendErrorProps {\n  error: Error | EmailSendError\n}\n\nexport const SendError: FC<SendErrorProps> = ({ error }) => {\n  return (\n    <>\n      <p className='error'>{error.message}</p>\n      {error instanceof EmailSendError ? (\n        <ul className='error'>\n          {error.failedEmails.map(email => <li key={email}>{email}</li>)}\n        </ul>\n      ) : null}\n    </>\n  )\n}\n","import React, { useState } from 'react';\r\nimport { Uploader } from './components/Uploader';\r\nimport { useParsedFiles } from './hooks/use-parsed-files';\r\nimport { FileList } from './components/FileList';\r\nimport { useEmailSender } from './hooks/use-email-sender';\r\nimport { SendError } from './components/SendError';\r\n\r\nfunction App() {\r\n\r\n  const [files, setFiles] = useState<File[] | null>(null)\r\n\r\n  console.log(files)\r\n  \r\n  const parsedFilesBag = useParsedFiles(files)\r\n\r\n  const [send, { error, success, loading }] = useEmailSender([parsedFilesBag])\r\n\r\n  const sendEmails = () => {\r\n    if (parsedFilesBag.result) {\r\n      const emails = parsedFilesBag.result.reduce((emails, parsedFile) => [...emails, ...Array.from(parsedFile.lines)], [] as string[])\r\n      send(new Set(emails))\r\n    }  \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Uploader onUpload={setFiles} />\r\n      {parsedFilesBag.result && <FileList files={parsedFilesBag.result}/>}\r\n      {parsedFilesBag.error && <p className=\"error\">Error reading files: {parsedFilesBag.error.message}</p>}\r\n      {success && <p className=\"success\">Emails sent! Yay!</p>}\r\n      {error && <SendError error={error}/>}\r\n      {parsedFilesBag.result && !success && <button disabled={loading} onClick={sendEmails}>{loading ? 'Sending...' : 'Send emails'}</button>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}